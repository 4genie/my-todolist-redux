{"version":3,"sources":["redux/selectors.js","utils.js","redux/actionTypes.js","redux/actions.js","Components/AddTodo.js","Components/Filters.js","Components/Todo.js","App.js","redux/reducers/todos.js","redux/reducers/filters.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["selectTodos","store","todos","filterTodos","filters","LOCAL_STORAGE_TODOS_KEY","getTodosFromToken","JSON","parse","localStorage","getItem","ADD_TODO","EDIT_TODO","DELETE_TODO","DELETE_FINISHED_TODO","TOGGLE_TODO","SET_FILTER","GETTODOS_FROM_LOCAL_STORAGE","addTodo","content","type","payload","id","uuidv4","isDone","setFilter","filter","Input","styled","input","attrs","className","Button","button","AddTodo","dispatch","useDispatch","useState","value","setValue","placeholder","onKeyDown","e","key","onChange","target","onClick","Filters","Filtername","EditInput","EditButton","DeleteButton","Todo","todo","isUpdating","setIsUpdating","inputRef","useRef","EditTodo","current","editTodo","ref","defaultChecked","htmlFor","Title","h1","Todolist","div","App","useSelector","todosfilter","useEffect","addTodosFromLocalStorage","setItem","stringify","setTodosToken","map","initialState","combineReducers","state","action","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da8cb2c3.chunk.js","sourcesContent":["// 把 store 的 state 儲存在指定的容器中\r\nexport const selectTodos = (store) => store.todos.todos;\r\nexport const filterTodos = (store) => store.filters.filters;\r\n","// 設定儲存到 localStorage 的 key 的名稱\r\nconst LOCAL_STORAGE_TODOS_KEY = 'todos';\r\n\r\n// 將 todos  儲存在 localStorage\r\nexport const setTodosToken = (todos) => {\r\n  localStorage.setItem(LOCAL_STORAGE_TODOS_KEY, JSON.stringify(todos));\r\n};\r\n// 從 localStorage 中拿取 todos\r\nexport const getTodosFromToken = () => {\r\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_TODOS_KEY));\r\n};\r\n","// 統一命名規則，方便日後的維護，以免一個地方改動，其他地方要跟著手動改動，容易遺漏\r\nexport const ADD_TODO = 'add_todo';\r\nexport const EDIT_TODO = 'edit_todo';\r\nexport const DELETE_TODO = 'delete_todo';\r\nexport const DELETE_FINISHED_TODO = 'delete_finished_todo';\r\nexport const TOGGLE_TODO = 'toggle_todo';\r\nexport const UNDONE_COUNT = 'undone_count';\r\nexport const SET_FILTER = 'set_filter';\r\nexport const GETTODOS_FROM_LOCAL_STORAGE = 'gettodos_from_local_storage';\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  ADD_TODO,\r\n  EDIT_TODO,\r\n  DELETE_TODO,\r\n  TOGGLE_TODO,\r\n  DELETE_FINISHED_TODO,\r\n  SET_FILTER,\r\n  GETTODOS_FROM_LOCAL_STORAGE,\r\n} from './actionTypes.js';\r\n\r\n//  新增 todo：設定 addTodo 這個 action 要帶給 reducer 的 type 以及 payload，\r\nexport const addTodo = (content) => ({\r\n  type: ADD_TODO,\r\n  payload: {\r\n    id: uuidv4(),\r\n    content,\r\n    isDone: false,\r\n  },\r\n});\r\n\r\n// 編輯 todo：設定 editTodo 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const editTodo = (id, content) => ({\r\n  type: EDIT_TODO,\r\n  payload: {\r\n    id,\r\n    content,\r\n  },\r\n});\r\n\r\n// 刪除 todo：設定 deleteTodo 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const deleteTodo = (id) => ({\r\n  type: DELETE_TODO,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\n// 是否完成 todo：設定 toggleTodo 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const toggleTodo = (id) => ({\r\n  type: TOGGLE_TODO,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\n// 刪除已完成 todo：設定 deleteFinishedTodo 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const deleteFinishedTodo = () => ({\r\n  type: DELETE_FINISHED_TODO,\r\n});\r\n\r\n// 篩選 todo：設定 setFilter 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const setFilter = (filter) => ({\r\n  type: SET_FILTER,\r\n  payload: {\r\n    filter,\r\n  },\r\n});\r\n\r\n// 拿 Local Storage 的 todos：設定 addTodosFromLocalStorage 這個 action 要帶給 reducer 的 type 以及 payload\r\nexport const addTodosFromLocalStorage = (todos) => ({\r\n  type: GETTODOS_FROM_LOCAL_STORAGE,\r\n  payload: {\r\n    todos,\r\n  },\r\n});\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { addTodo } from '../redux/actions';\r\n\r\nconst Input = styled.input.attrs({\r\n  className: 'input-todo form-control',\r\n})``;\r\nconst Button = styled.button.attrs({\r\n  className: 'btn btn-add btn-outline-secondary',\r\n})``;\r\n\r\nexport default function AddTodo() {\r\n  // 使用 dispatch 傳遞待會要帶入的 action\r\n  const dispatch = useDispatch();\r\n\r\n  // 設定 input 欄位的值的狀態\r\n  const [value, setValue] = useState('');\r\n\r\n  // 設定按下 'Enter' 鍵後，執行新增 todo\r\n  const handleKeyDown = (e) => {\r\n    // 如果按下的為 'Enter' 鍵，且輸入的值不為空\r\n    if (e.key === 'Enter' && value !== '') {\r\n      // dispatch  'addTodo()' 這個的 action，並將 input 輸入的值帶入\r\n      dispatch(addTodo(value));\r\n      // 清空 input 欄位\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* 輸入 input 的欄位，並且旁邊有'新增' 的按鈕 */}\r\n      <div className=\"input-group mb-3\">\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"todo\"\r\n          value={value}\r\n          //輸入後按下 'Enter'，新增 input 中的 todo\r\n          onKeyDown={handleKeyDown}\r\n          onChange={(e) => setValue(e.target.value)}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <Button\r\n            // 點擊 '新增' 的按鈕後，dispatch 'addTodo()' 這個的 action，並將 input 輸入的值帶入\r\n            onClick={() => {\r\n              dispatch(addTodo(value));\r\n              // 清空 input 欄位\r\n              setValue('');\r\n            }}\r\n          >\r\n            新增\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setFilter, deleteFinishedTodo } from '../redux/actions';\r\n\r\nexport default function Filters() {\r\n  // 使用 dispatch 傳遞待會要帶入的 action\r\n  const dispatch = useDispatch();\r\n  // filter 的三種狀態的陣列\r\n  const Filtername = ['All', 'Undone', 'Done'];\r\n  return (\r\n    <>\r\n      <div className=\"info mt-1 d-flex justify-content-between align-items-center\">\r\n        <div className=\"options d-flex mt-3\">\r\n          <div\r\n            className=\"active\"\r\n            onClick={() => {\r\n              // 點擊時，dispatch 傳遞 setFilter() 這個 action，並帶入 filter 的狀態\r\n              dispatch(setFilter(Filtername[0]));\r\n            }}\r\n          >\r\n            全部\r\n          </div>\r\n          <div\r\n            className=\"ml-2\"\r\n            onClick={() => {\r\n              // 點擊時，dispatch 傳遞 setFilter() 這個 action，並帶入 filter 的狀態\r\n              dispatch(setFilter(Filtername[1]));\r\n            }}\r\n          >\r\n            未完成\r\n          </div>\r\n          <div\r\n            className=\"ml-2\"\r\n            onClick={() => {\r\n              // 點擊時，dispatch 傳遞 setFilter() 這個 action，並帶入 filter 的狀態\r\n              dispatch(setFilter(Filtername[2]));\r\n            }}\r\n          >\r\n            已完成\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          onClick={() => {\r\n            // 點擊時，dispatch 傳遞 deleteFinishedTodo() 這個 action\r\n            dispatch(deleteFinishedTodo());\r\n          }}\r\n          className=\"clear-all\"\r\n        >\r\n          移除已完成待辦事項\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { editTodo, deleteTodo, toggleTodo } from '../redux/actions';\r\n\r\nconst EditInput = styled.input`\r\n  font-size: 14px;\r\n  padding: 1px;\r\n  border: solid 0.2px rgba(0, 0, 0, 0.1);\r\n  border-radius: 5px;\r\n  outline: none;\r\n`;\r\n\r\nconst EditButton = styled.button.attrs({\r\n  className: 'todo-btns btn btn-info',\r\n})``;\r\nconst DeleteButton = styled.button.attrs({\r\n  className: 'todo-btns btn btn-danger',\r\n})``;\r\n\r\n//從 App.js 傳入 props\r\nexport default function Todo({ todo }) {\r\n  // 儲存是否正在 edit 的狀態\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n\r\n  // 使用 dispatch  待會可傳遞要帶入的 action\r\n  const dispatch = useDispatch();\r\n\r\n  // 儲存編輯欄 input 中輸入的值\r\n  const inputRef = useRef();\r\n\r\n  // 點擊 '編輯' 後，更新 isUpdating 的編輯狀態為 true\r\n  const handleEditClick = () => {\r\n    setIsUpdating(true);\r\n  };\r\n\r\n  // 編輯 todo：\r\n  const EditTodo = (id) => {\r\n    // 設變數 content 取得編輯的 input 欄位的值\r\n    const content = inputRef.current.value;\r\n\r\n    // 如果編輯的 input 欄位沒有值 => isUpdating 狀態更新為 false\r\n    if (!content) {\r\n      return setIsUpdating(false);\r\n    }\r\n\r\n    // 有值時，dispatch 一個名為 \"editTodo()\" 的 action，並帶入 'id' 與'content'，其中，'content' 為編輯的 input 欄位輸入的值\r\n    dispatch(editTodo(id, content));\r\n\r\n    //  將 isUpdating 狀態更新為 false\r\n    setIsUpdating(false);\r\n  };\r\n\r\n  // 點擊 '修改完成' 後，執行 EditTodo()\r\n  const handleFinishedEditClick = (id) => {\r\n    EditTodo(id);\r\n  };\r\n\r\n  // 編輯欄按下 'Enter' 鍵後，執行 EditTodo()\r\n  const handleKeyDown = (e, id) => {\r\n    // 若按下的鍵非 'Enter'=> return\r\n    if (e.key !== 'Enter') return;\r\n    // 若為'Enter',執行 EditTodo()\r\n    EditTodo(id);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      key={todo.id}\r\n      className=\"todo list-group-item list-group-item-action d-flex justify-content-between align-items-center\"\r\n    >\r\n      <div className=\"todo__content-wrapper custom-control custom-checkbox\">\r\n        {/* 正在 edit 的狀態為 true 時，顯示編輯的 input 欄位 */}\r\n        {/* 否則，顯示 todo */}\r\n        {isUpdating ? (\r\n          <EditInput\r\n            ref={inputRef}\r\n            onKeyDown={() => {\r\n              handleKeyDown(todo.id);\r\n            }}\r\n          ></EditInput>\r\n        ) : (\r\n          <>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"custom-control-input\"\r\n              id={todo.id}\r\n              onClick={() => {\r\n                // 點擊時，dispatch 傳遞 toggleTodo() 這個 action，並帶入 todo 的 id\r\n                dispatch(toggleTodo(todo.id));\r\n              }}\r\n              defaultChecked={todo.isDone ? 'checked' : ''}\r\n            />\r\n            <label\r\n              className=\"todo__content custom-control-label\"\r\n              htmlFor={todo.id}\r\n            >\r\n              {todo.content}\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* edit 的狀態為 false 時，顯示'編輯' 按鈕}\r\n      {/* 否則，顯示 '修改完成' 按鈕 */}\r\n      {!isUpdating ? (\r\n        // 點擊按鈕時，執行 handleEditClick\r\n        <EditButton onClick={handleEditClick}>編輯</EditButton>\r\n      ) : (\r\n        <EditButton\r\n          // 點擊按鈕時，執行 handleFinishedEditClick\r\n          onClick={() => {\r\n            handleFinishedEditClick(todo.id);\r\n          }}\r\n        >\r\n          修改完成\r\n        </EditButton>\r\n      )}\r\n\r\n      <DeleteButton\r\n        className=\"todo-btns btn btn-danger\"\r\n        // 點擊時，dispatch 傳遞 deleteTodo() 這個 action，並帶入 todo 的 id\r\n        onClick={() => {\r\n          dispatch(deleteTodo(todo.id));\r\n        }}\r\n      >\r\n        刪除\r\n      </DeleteButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTodo.propTypes = {\r\n  todo: PropTypes.object,\r\n  handleDeleteTodo: PropTypes.func,\r\n  handleToggleIsDone: PropTypes.func,\r\n  editTodo: PropTypes.func,\r\n};\r\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { selectTodos, filterTodos } from './redux/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setTodosToken, getTodosFromToken } from './utils';\nimport { addTodosFromLocalStorage } from './redux/actions';\nimport AddTodo from './Components/AddTodo';\nimport Filters from './Components/Filters';\nimport Todo from './Components/Todo';\n\nconst Title = styled.h1`\n  margin-top: 10px;\n  text-align: center;\n`;\n\nconst Todolist = styled.div.attrs({\n  className: 'todos list-group',\n})``;\n\nexport default function App() {\n  // 變數 todos 為拿取 selectTodos 中的 state 狀態\n  const todos = useSelector(selectTodos);\n\n  // 變數 todosfilter 為拿取 filterTodos 中的 state 狀態\n  const todosfilter = useSelector(filterTodos);\n\n  // 使用 dispatch 傳遞待會要帶入的 action\n  const dispatch = useDispatch();\n\n  // 拿取 Local Storage 中的 todos\n  useEffect(() => {\n    // 如果 token 中有儲存 todos 的話\n    if (getTodosFromToken()) {\n      // 使用 dispatch 傳遞 \"addTodosFromLocalStorage\" 這個 action，並帶入 token 中的 todos\n      dispatch(addTodosFromLocalStorage(getTodosFromToken()));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    // dependency： 為空值時，即表示要在一開始渲染時執行一次\n  }, []);\n\n  // todos 的狀態有變化時，儲存到 localStorage\n  useEffect(() => {\n    setTodosToken(todos);\n    // dependency： 當偵測到 todos 改變時要重新渲染\n  }, [todos]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-lg-6\">\n            <Title>Todo List</Title>\n\n            {/* 輸入 input 的欄位，並且旁邊有'新增' 的按鈕 */}\n            <AddTodo />\n\n            {/* 顯示 Todos 的內容  */}\n            <Todolist>\n              {todos\n                .filter((todo) => {\n                  if (todosfilter === 'All') return todo;\n                  return todosfilter === 'Done' ? todo.isDone : !todo.isDone;\n                })\n                .map((todo) => (\n                  <Todo key={todo.id} todo={todo} />\n                ))}\n            </Todolist>\n\n            {/* todos 的篩選功能 */}\n            <Filters />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nApp.propTypes = {\n  filterValue: PropTypes.array,\n  handleAddTodo: PropTypes.func,\n  handleKeyDown: PropTypes.func,\n  handleDeleteTodo: PropTypes.func,\n  handleToggleIsDone: PropTypes.func,\n  handleClearIsDoneTodos: PropTypes.func,\n  handleFilter: PropTypes.func,\n  editTodo: PropTypes.func,\n  handleUnfinishedCount: PropTypes.func,\n};\n","import {\r\n  ADD_TODO,\r\n  EDIT_TODO,\r\n  DELETE_TODO,\r\n  TOGGLE_TODO,\r\n  DELETE_FINISHED_TODO,\r\n  GETTODOS_FROM_LOCAL_STORAGE,\r\n} from '../actionTypes';\r\n\r\n// 設定 state 的初始值\r\nconst initialState = {\r\n  todos: [],\r\n};\r\n\r\nexport default function todoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      const { id, content, isDone } = action.payload;\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, { id, content, isDone }],\r\n      };\r\n    }\r\n    case EDIT_TODO: {\r\n      const { id, content } = action.payload;\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => {\r\n          if (todo.id !== id) return todo;\r\n          return {\r\n            ...todo,\r\n            content,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n\r\n    case DELETE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== id),\r\n      };\r\n    }\r\n\r\n    case TOGGLE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => {\r\n          if (todo.id !== id) return todo;\r\n          return {\r\n            ...todo,\r\n            isDone: !todo.isDone,\r\n          };\r\n        }),\r\n      };\r\n    }\r\n\r\n    case DELETE_FINISHED_TODO: {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => !todo.isDone),\r\n      };\r\n    }\r\n\r\n    case GETTODOS_FROM_LOCAL_STORAGE: {\r\n      const { todos } = action.payload;\r\n      return {\r\n        ...state,\r\n        todos: todos,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { SET_FILTER } from '../actionTypes';\r\n\r\nconst initialState = {\r\n  filters: 'All',\r\n};\r\n\r\nexport default function filterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      const { filter } = action.payload;\r\n      return {\r\n        ...state,\r\n        filters: filter,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","// 從 redux 引入 combineReducers 這個方法\r\nimport { combineReducers } from 'redux';\r\n// 引入 名為 'todo' 的 reducer\r\nimport todos from './todos';\r\n// 引入 名為 'filters' 的 reducer\r\nimport filters from './filters';\r\n\r\n// 合併 todos 以及 filters 兩個 reducer\r\nexport default combineReducers({\r\n  todos,\r\n  filters,\r\n});\r\n","// 創建一個 store\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\n// 把 reducers 儲存在這個 store 裡\r\nexport default createStore(\r\n  rootReducer,\r\n  // 讓瀏覽器的 redux devtool 可以 debug\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// 創建一個 provider\n// (相當於 global 的區域，底下的 components 都可以拿到 Provider 內提供的 prop，是大家共用的)\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  // 將 store 放在 Provider 內，讓底下的 components 都可以拿取的到\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}